body {
    margin: 0;
}

h1 {
    color: red;
}

p {
    color: blue;
}

.p-texto {
    color: lightcoral;
}

.boxmodel {
    background-color: red;
    width: 200px;
    height: 200px;
    padding: 30px 20px;
    border: 3px solid blue;
    border-width: 5px 1px 20px 10px;
    border-bottom-style: doubled;
    border-radius: 10px;
}

.boxmodel2 {
    background-color: red;
    width: 200px;
    height: 200px;
    padding: 20px;
    /*padding: 30px 20px;
    border:3px solid blue;
    border-width: 5px 1px 20px 10px;
    border-bottom-style: doubled;
    border-radius: 10px;*/
}

.boxmodel3 {
    background-color: red;
    width: 200px;
    height: 200px;
    padding: 30px 20px;
    border: 3px solid #000;
    border-width: 5px 10px 2px 10px;
    border-width: 20px 10px;
    border-radius: 15px;
    margin: 50px;
    margin: 5px 10px 10px 7px;
}

.boxmodel4 {
    background-color: red;
    width: 200px;
    height: 200px;
    padding: 30px 20px;
    border: 3px solid #000;
    border-width: 5px 10px 2px 10px;
    border-width: 20px 10px;
    border-radius: 15px;
    margin: 50px;
    margin: 100px 10px 10px 7px;
    display: inline;
    /* não aceita nem largura nem altura */
    display: inline-block;
    /* vai aceitar a altura e a largura */
}

.paragrafo-box {
    color: #000;
    margin: 0;
}


/* POSITIONS */


/* static */


/* relative */


/* fixed */


/* absolute */


/* sticky */

.div-position {
    width: 500px;
    height: 500px;
    background-color: green;
    border-bottom: 2px dotted black;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;
    color: beige;
}

.static {
    position: static;
    /* posição padrão  - ela não é afetada por posicionamento 
    flow do html, não é alterada pelo top, left, right e bottom*/
}

.relative {
    position: relative;
    /* ele fica relativo ao elemento mais próximo, no caso será influenciado pelo top e pelo left, não se importando 
    com os outros 
    
    
    ela é alterada pelo top, left, bottom e right*/
    background-color: blue;
    top: 100px;
    left: 50px;
}

.absolute {
    position: absolute;
    /* ela quebra o fluxo simplesmnete se importando com a posição da borda  - ele ocupa qualquer lugar
    em que seu antecessor está 
    
    respeita a hierarquia do html, até de acordo com o elemento pai, tipo, se estiver dentro de uma div ela respeita essa div*/
    background-color: purple;
    right: 0;
    top: 0;
}

.mini-div {
    height: 50px;
    width: 50px;
    top: 50px;
    left: 100px;
}

.fixed {
    position: fixed;
    /* fica de acordo com a tela, em qualquer lugar, não pelo elemento pai, e ela acompanha a tela */
    height: 200px;
    background-color: yellow;
    bottom: 0;
    right: 0;
}

.sticky {
    position: sticky;
    /* é parecido com o fixed, fica de acordo com a tela, mas só quando tem a influencia do scroll, quando o scroll passa por ela */
    height: 200px;
    background-color: pink;
    top: 0;
}


/* FLOAT - flutuar o elemento pro lado que a gente escolher 

mas ele deixa o elemento sem altura, nem nada, fica flutuando mesmo*/

.container {
    padding: 50px;
}

.img-float {
    width: 200px;
    height: 200px;
    float: left;
}


/* OVERFLOW: criará um novo contexto de formatação de bloco. Isto é tecnicamente necessário para evitar que um conteúdo flutuante que entre em contato com o objeto 
dentro da área de rolamento e quebre as linhas do conteúdo para ajustar a disposição do texto. 
A quebra das linhas ocorre sempre que a barra de rolagem é utilizada, tornando a experiência de rolagem lenta. 

A propriedade overflow define o comportamento de um elemento quando suas dimensões são excedidas pelo conteúdo.

Os valores possíveis dessa propriedade são os seguintes:

visible
É o valor padrão e define que o conteúdo não será cortado se exceder o tamanho do elemento.

hidden
O conteúdo excedido não ficará visível.

scroll
O conteúdo excedido será cortado mas haverá uma barra de rolagem para permitir a visualização completa do mesmo.

auto
A barra de rolagem será adicionada automaticamente se o conteúdo exceder o tamanho do elemento.

initial
Ajusta a propriedade para o valor padrão.

inherit
Herda a propriedade do elemento pai.
*/

.div-float {
    overflow: auto;
}


/* imagem do meio vai flutuar pra direita */

.float-right {
    float: right;
}

.p-float {
    color: #000;
}


/* CLEAR */

.clear {
    /* ele ignora que o elemento perto dele tá flutuando, vai seguir a estrutura do html normal */
    clear: both;
}


/* MARGIN */

.pixel-1 {
    background-color: red;
    width: 100px;
    height: 100px;
}

.pixel-2 {
    background-color: blue;
    width: 500px;
    height: 100px;
}